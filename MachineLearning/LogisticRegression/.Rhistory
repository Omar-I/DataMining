getwd()
setwd("/home/chris/Documents/itt/Enero_Junio_2020/Mineria_de_datos/DataMining/MachineLearning/MultipleLinearRegression")
getwd()
# Importing the dataset
dataset <- read.csv('50_Startups.csv')
View(dataset)
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1,2,3))
dataset
library(caTools)
set.seed(123)
split <- sample.split(dataset$Profit, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
regressor = lm(formula = Profit ~ .,
data = training_set )
summary(regressor)
# Prediction the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
View(test_set)
View(test_set)
getwd()
setwd("/home/chris/Documents/itt/Enero_Junio_2020/Mineria_de_datos/DataMining/MachineLearning/MultipleLinearRegression")
getwd()
View(dataset)
View(dataset)
# Importing the dataset
dataset <- read.csv('50_Startups.csv')
View(dataset)
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1,2,3))
dataset
View(dataset)
library(caTools)
set.seed(123)
split <- sample.split(dataset$Profit, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
View(training_set)
View(test_set)
# Fitting Multiple Linear Regression to the Training set
#regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State)
regressor = lm(formula = Profit ~ .,
data = training_set )
summary(regressor)
# Prediction the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Building the optimal model using Backward Elimination
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset )
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset )
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset )
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset )
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
clear
getwd()
setwd("/home/chris/Documents/itt/Enero_Junio_2020/Mineria_de_datos/DataMining/MachineLearning/LogisticRegression")
getwd()
# Importing the dataset
dataset <- read.csv('Social_Network_Ads.csv')
View(dataset)
dataset <- dataset[, 3:5]
library(caTools)
set.seed(123)
split <- sample.split(dataset$Salary, SplitRatio = 0.75)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
library(caTools)
set.seed(123)
split <- sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
training_set[, 1:2] <- scale(training_set[, 1:2])
test_set[, 1:2] <- scale(test_set[, 1:2])
View(training_set)
View(test_set)
#Feature scaling
scale()?
training_set[, 1:2] <- scale(training_set[, 1:2])
classifier = gml(formula = Purchased ~ .,
family = binomial,
data = training_set)
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
View(classifier)
# Predicting the Test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
prob_pred
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred
cm = table(test_set[, 3], y_pred)
cm
